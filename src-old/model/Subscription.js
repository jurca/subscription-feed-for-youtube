
import Generated from "./annotation/Generated";
import PrimaryKey from "./annotation/PrimaryKey";
import AbstractModel from "./AbstractModel";
import SubscriptionState from "./SubscriptionState";
import SubscriptionType from "./SubscriptionType";

/**
 * The model for storing the information about the currently known
 * subscriptions, both account-bound and incognito.
 */
@Generated
@PrimaryKey("id")
export default class Subscription extends AbstractModel {
  /**
   * Initializes the model.
   */
  constructor() {
    super();

    /**
     * Internal ID of this subscription record generated by the extension's
     * storage.
     *
     * @type {number}
     */
    this.id = null;

    /**
     * The type of this subscription.
     *
     * @type {SubscriptionType}
     */
    this.type = SubscriptionType.CHANNEL;

    /**
     * The ID of the playlist from which the videos should be retrieved. This
     * is the "uploads" playlist if this is a subscription to a YouTube
     * channel.
     *
     * @type {string}
     */
    this.playlist = null;

    /**
     * The ID of the channel to which the subscription is made to. The field is
     * the ID of the channel owning the playlist for incognito subscriptions to
     * playlists.
     *
     * @type {?string}
     */
    this.channel = null;

    /**
     * The state of this subscription. The fields is always set to
     * {@code ACTIVE} for subscriptions provided by accounts to prevent data
     * consistency checking hell.
     *
     * @type {SubscriptionState}
     */
    this.state = SubscriptionState.ACTIVE;

    /**
     * The last reported error related to this subscription.
     *
     * @type {string}
     */
    this.lastError = null;

    /**
     * The ID of the account from which this subscription has been provided.
     * The field is {@code null} if this is a incognito subscription.
     *
     * @type {?string}
     */
    this.account = null;

    /**
     * Set to {@code true} if this is an incognito subscription (has been
     * provided manually instead of read from a subscription).
     *
     * @type {boolean}
     */
    this.incognito = false;
  }
}
